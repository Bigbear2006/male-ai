# Generated by Django 5.2.1 on 2025-05-18 18:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.PositiveBigIntegerField(primary_key=True, serialize=False, verbose_name='Telegram ID')),
                ('first_name', models.CharField(max_length=255, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Фамилия')),
                ('username', models.CharField(blank=True, max_length=32, null=True, verbose_name='Ник')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Есть премиум')),
                ('subscription_end', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания подписки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('priority', models.CharField(blank=True, choices=[('calm', 'Спокойствие'), ('focus', 'Фокус'), ('action', 'Действие')], max_length=50, verbose_name='Приоритет')),
                ('spend_time', models.CharField(blank=True, choices=[('5m', '5 минут'), ('15m', '15 минут'), ('30m', '30 минут')], max_length=10, verbose_name='Готов уделять времени')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.client', verbose_name='Пользователь')),
                ('start_point', models.TextField(verbose_name='Точка старта')),
                ('month_goal', models.TextField(verbose_name='Цель на 30 дней')),
                ('growth_zones', models.CharField(max_length=255, verbose_name='Зоны роста')),
                ('upgrade_style', models.CharField(choices=[('soft', 'Мягкий'), ('hard', 'Жёсткий'), ('adaptive', 'Адаптивный')], max_length=20, verbose_name='Стиль прокачки')),
            ],
            options={
                'verbose_name': 'Профиль 1.0',
                'verbose_name_plural': 'Профили 1.0',
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.client', verbose_name='Пользователь')),
                ('preferred_name', models.CharField(max_length=255, verbose_name='Как обращаться')),
                ('age', models.CharField(max_length=10, verbose_name='Возраст')),
                ('shape', models.CharField(max_length=255, verbose_name='Внутреннее состояние')),
                ('last_forces_source', models.CharField(max_length=255, verbose_name='Что последнее дало силы или радость')),
                ('self_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Самооценка')),
                ('energy_directions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('fuss', 'Суета и хаос'), ('procrastination', 'Прокрастинация'), ('doubts', 'Сомнения и самокопание'), ('emotional_swing', 'Эмоциональные качели'), ('burnout', 'Перегорание'), ('structure_absence', 'Отсутствие структуры')], max_length=50), size=None, verbose_name='Куда чаще всего уходит энергия')),
                ('purpose', models.CharField(choices=[('calm_inside', 'Спокойствие внутри'), ('order_of_actions', 'Порядок в действиях'), ('discipline', 'Дисциплина'), ('focusing', 'Фокусировка'), ('confidence', 'Уверенность')], max_length=50, verbose_name='Что сейчас важнее всего')),
                ('future_version', models.CharField(max_length=255, verbose_name='Кем хочет стать через 30 дней')),
                ('support_style', models.CharField(choices=[('calm', 'Спокойный и поддерживающий'), ('hard', 'Жёсткий и прямой'), ('flexible', 'Гибкий: поддержка + вызов')], max_length=50, verbose_name='Стиль поддержки')),
                ('support_option', models.CharField(choices=[('calm_reminder', 'Спокойное напоминание: ты можешь'), ('direct_challenge', 'Прямой вызов: давай, соберись'), ('question', 'Вопрос: что ты чувствуешь и готов сделать?')], max_length=50, verbose_name='Что больше помогает, когда что-то идёт не так')),
                ('key_quality', models.CharField(max_length=255, verbose_name='Качество, которое хочется усилить')),
            ],
            options={
                'verbose_name': 'Анкета',
                'verbose_name_plural': 'Анкеты',
            },
        ),
        migrations.CreateModel(
            name='Habit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='habits', to='core.client', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Привычка',
                'verbose_name_plural': 'Привычки',
                'ordering': ['-created_at'],
            },
        ),
    ]
